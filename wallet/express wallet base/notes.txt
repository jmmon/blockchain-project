Storage options:
	Session storage: user has to reload wallet each time
	Cookie storage: store encrypted mnemonic in cookie?
	Client localStorage: store encrypted mnemonic in browser

Flow:
	Generate mnemonic / keys / addresses
		encrypt with password and save in storage
		save hashed password in storage also?

	Require password for any commands
		check hashed password vs saved hashed password
	

		
	
hash password
encrypt mnemonic with hashedPassword?

We could say: add it to session so we can access the wallet;

	they want password protection so we need the password to decrypt wallet or need to check the password every time?

	Could save the account into storage so it autofills when sending



load from mnemonic:
	enter (new password) for encrypt into session
	save into storage
	(save address into storage)



Views:
(not logged in)
	Create: create (and save to session) a new wallet/menomic
(	Load: WAS load from file, but I won't have that functionality so probably don't need)
	Recover: Load wallet from mnemonic; save with password; (saves to session)
(logged in / password-protected)
		Balance: take password to unlock, take node URL, (decrypt wallet and) fetch balance of the account from the node URL
		Send: take password to unlock, take node URL, and then allow for signing transaction (with wallet), and finally allow for sending transaction to node URL
		Logout: remove data from session (and redirect to home page?)